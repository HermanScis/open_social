<?php

/**
 * @file
 * Contains social_font.install.
 */

use Drupal\social_font\Entity\Font;
use Drupal\user\Entity\Role;
use Drupal\user\RoleInterface;

/**
 * The social_font install file.
 */
function social_font_install() {

  $font = Font::create([
    'name' => 'Montserrat',
    'user_id' => 1,
    'created' => \Drupal::time()->getRequestTime(),
    'field_fallback' => '1',
  ]);

  $font->save();

  // Set some default permissions.
  _social_font_set_permissions();
}

/**
 * Function to set permissions.
 */
function _social_font_set_permissions() {
  $roles = Role::loadMultiple();

  /** @var \Drupal\user\Entity\Role $role */
  foreach ($roles as $role) {
    if ($role->id() === 'administrator') {
      continue;
    }

    $permissions = _social_font_get_permissions($role->id());
    user_role_grant_permissions($role->id(), $permissions);
  }
}

/**
 * Build the permissions for each role.
 *
 * @param string $role
 *   The role.
 *
 * @return array
 *   Returns an array containing permissions.
 */
function _social_font_get_permissions($role) {
  // Anonymous.
  $permissions[RoleInterface::ANONYMOUS_ID] = [];

  // Authenticated.
  $permissions[RoleInterface::AUTHENTICATED_ID] = array_merge($permissions[RoleInterface::ANONYMOUS_ID], []);

  // Verified.
  $permissions['verified'] = array_merge($permissions[RoleInterface::AUTHENTICATED_ID], []);

  // Content manager.
  $permissions['contentmanager'] = array_merge($permissions['verified'], []);

  // Site manager.
  $permissions['sitemanager'] = array_merge($permissions['contentmanager'], [
    'add font entities',
    'delete font entities',
    'edit font entities',
    'access font overview',
    'view published font entities',
    'view unpublished font entities',
  ]);

  if (isset($permissions[$role])) {
    return $permissions[$role];
  }
  return [];
}
