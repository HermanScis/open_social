<?php

/**
 * @file
 * Install, update and uninstall functions for the social_profile module.
 */

use Drupal\Core\Field\BaseFieldDefinition;
use Drupal\Core\Field\FieldStorageDefinitionInterface;
use Drupal\Core\File\FileSystemInterface;
use Drupal\Core\Entity\Entity\EntityViewDisplay;
use Drupal\Core\Entity\Entity\EntityViewMode;
use Drupal\Core\Site\Settings;
use Drupal\Core\StringTranslation\TranslatableMarkup;
use Drupal\field\Entity\FieldConfig;
use Drupal\field\Entity\FieldStorageConfig;
use Drupal\file\Entity\File;
use Drupal\menu_link_content\Entity\MenuLinkContent;
use Drupal\taxonomy\Entity\Term;
use Drupal\taxonomy\Entity\Vocabulary;
use Drupal\user\Entity\Role;
use Drupal\block\Entity\Block;
use Drupal\profile\Entity\Profile;
use Drupal\profile\Entity\ProfileType;
use Drupal\user\Entity\User;
use Symfony\Component\Yaml\Yaml;

/**
 * Implements hook_install().
 *
 * Perform actions related to the installation of social_profile.
 */
function social_profile_install() {
  // Set some default permissions.
  _social_profile_set_permissions();
  // Add some links.
  _social_profile_create_menu_links();
  // Add default profile image.
  _social_profile_add_default_profile_image();

  _social_profile_install_visibility_fields();
  _social_profile_populate_nationalities_vocabulary('10.3.0');

  // Grant the default permissions for this feature.
  user_role_grant_permissions(
    'authenticated',
    [
      'add own profile profile',
      'update own profile profile',
      'view any profile profile',
      'view own profile profile',
      'view profile',
    ]
  );
  user_role_grant_permissions(
    'contentmanager',
    [
      'add any profile profile',
      'update any profile profile',
      'edit profile tags',
    ]
  );
  user_role_grant_permissions(
    'sitemanager',
    [
      'add any profile profile',
      'update any profile profile',
      'edit profile tags',
      'delete terms in profile_tag',
      'edit terms in profile_tag',
      'administer profile settings',
      'view profile email',
      'view profile language',
    ]
  );

  // Create a profile for user 1.
  Profile::create([
    'type' => ProfileType::load('profile')->id(),
    'uid' => 1,
  ])->save();

}

/**
 * Implements hook_update_last_removed().
 */
function social_profile_update_last_removed() {
  // Removed all update hooks before 10.0.
  return 8802;
}

/**
 * Function to set default profile image if not set already.
 */
function _social_profile_add_default_profile_image() {
  // Add default image.
  $config_factory = \Drupal::configFactory();
  $field_image_config = $config_factory->getEditable('field.field.profile.profile.field_profile_image');
  $default_image = $field_image_config->get('settings.default_image');

  $uri = Drupal::service('file_system')->copy(drupal_get_path('module', 'social_profile') . DIRECTORY_SEPARATOR . 'images' . DIRECTORY_SEPARATOR . 'default-profile-picture.png', 'public://default-profile-picture.png', FileSystemInterface::EXISTS_REPLACE);

  $media = File::create([
    'uri' => $uri,
  ]);
  $media->uuid = '4eb1d927-28f4-402a-8c87-017e637f434a';
  $media->status = 1;
  $media->save();

  $default_image['uuid'] = $media->uuid();
  $default_image['alt'] = 'Default profile image';
  $default_image['title'] = 'Default profile image';
  $default_image['height'] = 200;
  $default_image['width'] = 200;

  $field_image_config->set('settings.default_image', $default_image)->save(TRUE);
  drupal_flush_all_caches();
}

/**
 * Function to create some menu items.
 */
function _social_profile_create_menu_links() {
  $menu_links = MenuLinkContent::loadMultiple();
  $parent = NULL;
  /** @var \Drupal\menu_link_content\Entity\MenuLinkContent $menu_link */
  foreach ($menu_links as $menu_link) {
    if ($menu_link->label() === 'Explore' && $menu_link->isExpanded()) {
      $parent = 'menu_link_content:' . $menu_link->uuid();
    }
  }

  if (!is_null($parent)) {
    MenuLinkContent::create([
      'title' => 'All members',
      'link' => ['uri' => 'internal:/all-members'],
      'menu_name' => 'main',
      'expanded' => FALSE,
      'weight' => 50,
      'parent' => $parent,
    ])->save();
  }
}

function _social_profile_install_visibility_fields() : void {
  // Create visibility fields for each field on the profile.
  $ids = \Drupal::entityQuery('field_storage_config')
    ->condition('id', 'profile.', 'STARTS_WITH')
    ->execute();
  // Fetch all fields and key them by field name.
  /** @var \Drupal\field\FieldStorageConfigInterface[] $field_storages */
  $field_storages = FieldStorageConfig::loadMultiple($ids);
  foreach ($field_storages as $field_storage_config) {
    // We skip field_profile_show_email because its value will be put into
    // field_profile_email_visibility instead and the field will then be
    // removed.
    if ($field_storage_config->getName() === 'field_profile_show_email') {
      continue;
    }

    // If this was a field added by an update hook before this one runs in the
    // same update cycle then our hook_insert has already created the visibility
    // field
    if ($field_storage_config->getThirdPartySetting('social_profile', 'visibility_stored_by') !== NULL) {
      continue;
    }

    // Skip fields used for storing visibility settings.
    if ($field_storage_config->getThirdPartySetting('social_profile', 'visibility_for') !== NULL) {
      continue;
    }

    $visibility_storage_config = social_profile_create_visibility_field_storage_config_for($field_storage_config);

    $field_storage_config->setThirdPartySetting('social_profile', 'visibility_stored_by', $visibility_storage_config->id());
    $field_storage_config->save();
  }
}

/**
 * Seed the nationalities vocabulary with initial data.
 *
 * Loads from `social_profile/content/nationalities-<version>.yml`. This allows
 * this to be used in update hooks in a predictable manner.
 *
 * @param string $version
 *   The version to load.
 */
function _social_profile_populate_nationalities_vocabulary(string $version) : void {
  $module_path = drupal_get_path('module', 'social_profile');
  $data = Yaml::parseFile("$module_path/content/nationalities-$version.yml");

  foreach ($data['nationalities'] as $nationality) {
    Term::create([
      'vid' => 'nationality',
      'name' => $nationality,
    ])->save();
  }
}

/**
 * Implements hook_uninstall().
 */
function social_profile_uninstall() {
  \Drupal::service('config.factory')
    ->getEditable('social_profile.settings')
    ->delete();
}

/**
 * Moved the profile's banner field above image field.
 */
function social_profile_update_8803() {
  /** @var \Drupal\update_helper\Updater $updateHelper */
  $updateHelper = \Drupal::service('update_helper.updater');

  // Execute configuration update definitions with logging of success.
  $updateHelper->executeUpdate('social_profile', 'social_profile_update_8803');

  // Output logged messages to related channel of update execution.
  return $updateHelper->logger()->output();
}

/**
 * Add a new block to display filters (social_tagging) on all-members page.
 *
 * Load in a config file from an specific update hook that will never change.
 */
function social_profile_update_8901() {
  $config_files = [
    'block.block.exposedformnewest_userspage_newest_users' => drupal_get_path('module', 'social_profile') . '/config/static/block.block.exposedformnewest_userspage_newest_users_8901.yml',
    'block.block.socialblue_exposedformnewest_userspage_newest_users' => drupal_get_path('module', 'social_profile') . '/config/static/block.block.socialblue_exposedformnewest_userspage_newest_users_8901.yml',
  ];

  foreach ($config_files as $key => $config_file) {
    if (is_file($config_file)) {
      $settings = Yaml::parse(file_get_contents($config_file));
      if (is_array($settings)) {
        $config = \Drupal::configFactory()
          ->getEditable($key);
        $config->setData($settings)->save(TRUE);
      }
    }
  }
}

/**
 * Enable exposed filters block on all-members views.
 */
function social_profile_update_8902() {
  /** @var \Drupal\update_helper\Updater $updateHelper */
  $updateHelper = \Drupal::service('update_helper.updater');

  // Execute configuration update definitions with logging of success.
  $updateHelper->executeUpdate('social_profile', 'social_profile_update_8902');

  // Output logged messages to related channel of update execution.
  return $updateHelper->logger()->output();
}

/**
 * Sets default profile settings.
 */
function social_profile_update_8903() {
  \Drupal::configFactory()
    ->getEditable('social_profile.settings')
    ->set('enable_profile_tagging', TRUE)
    ->save();
}

/**
 * Install Profile name field to profile entity type.
 */
function social_profile_update_8904() {
  // Update hook removed.
}

/**
 * Update field definitions.
 */
function social_profile_update_8905() {
  // Update hook removed.
}

/**
 * Remove the profile_name field.
 */
function social_profile_update_8906() {
  // The profile_name field contains a computed value, but we'll be creating
  // visibility values that allow us to query the parts of the computed value
  // directly instead.
  $field_storage = \Drupal::entityDefinitionUpdateManager()->getFieldStorageDefinition('profile_name', 'profile');
  if ($field_storage !== NULL) {
    \Drupal::entityDefinitionUpdateManager()->uninstallFieldStorageDefinition($field_storage);
  }
}

/**
 * Add email and langcode field to profile.
 */
function social_profile_update_8907() {
  // By moving the fields to the profile we can display them from the profile
  // directly and use them with our profile visibility fields. This means we no
  // longer have to jump through hoops to pull the e-mail from the user entity.
  $email_storage = FieldStorageConfig::create([
    'field_name' => "field_profile_email",
    'entity_type' => 'profile',
    'type' => 'email',
    'module' => 'social_profile',
    'translatable' => FALSE,
    'locked' => TRUE,
    'settings' => [
      'max_length' => 255,
    ],
  ]);
  $email_storage->save();

  FieldConfig::create([
    'field_storage' => $email_storage,
    'bundle' => 'profile',
    'langcode' => 'en',
    'label' => new TranslatableMarkup('Email'),
    'required' => TRUE,
    'translatable' => FALSE,
    'settings' => [],
    'field_type' => 'email',
  ])->save();


  $preferred_language_storage = FieldStorageConfig::create([
    'field_name' => "field_profile_preferred_language",
    'entity_type' => 'profile',
    'type' => 'string',
    'module' => 'social_profile',
    'translatable' => FALSE,
    'locked' => TRUE,
  ]);
  $preferred_language_storage->save();

  FieldConfig::create([
    'field_storage' => $preferred_language_storage,
    'bundle' => 'profile',
    'langcode' => 'en',
    'label' => new TranslatableMarkup('Preferred language'),
    'required' => TRUE,
    'translatable' => FALSE,
    'settings' => [
      'max_length' => 255,
    ],
    'field_type' => 'string',
  ])->save();

  /** @var \Drupal\Core\Entity\EntityDisplayRepositoryInterface $display_repository */
  $display_repository = \Drupal::service('entity_display.repository');
  $profile_display = $display_repository->getViewDisplay('profile', 'profile');
  // Add email to default profile display.
  $profile_display->setComponent('field_profile_email', [
      'label' => 'above',
      'type' => 'email_mailto',
    ]);
  // Add preferred language to default profile display.
  $profile_display->setComponent('field_profile_preferred_language', [
      'label' => 'above',
      'type' => 'string',
    ]);
  $profile_display->save();

  // TODO Add view mode install configuration.
}

/**
 * Fill new synchronised profile fields.
 */
function social_profile_update_8908(array &$sandbox) : void {
  if (!isset($sandbox['uids'])) {
    $sandbox['uids'] = \Drupal::entityQuery('user')
      ->condition('uid', 0, '!=')
      ->execute();
    $sandbox['total'] = count($sandbox['uids']);

    if ($sandbox['total'] === 0) {
      return;
    }

    $sandbox['processed'] = 0;
    $sandbox['batch_size'] = Settings::get('entity_update_batch_size', 50);
  }

  $user_ids = array_splice($sandbox['uids'], 0, $sandbox['batch_size']);

  /** @var \Drupal\user\UserInterface[] $users */
  $users = User::loadMultiple($user_ids);
  /** @var \Drupal\profile\ProfileStorageInterface $profile_storage */
  $profile_storage = \Drupal::entityTypeManager()->getStorage('profile');

  foreach ($users as $user) {
    $profile = $profile_storage->loadByUser($user, 'profile');
    social_profile_sync_user_fields_to_profile($user, $profile);
  }

  $sandbox['processed'] += count($user_ids);
  $sandbox['#finished'] = $sandbox['processed'] / $sandbox['total'];
}

/**
 * Install visibility profile fields.
 */
function social_profile_update_8909() : void {
  // We do this for all currently existing fields regardless of when this update
  // hook runs since we have other methods in place to catch newly created
  // fields and filter out previously updated fields.
  _social_profile_install_visibility_fields();
}

/**
 * Install or adopt social profile fields fields.
 */
function social_profile_update_8910() : void {
  $config_factory = \Drupal::configFactory();
  $nationality_config = $config_factory->getEditable('taxonomy.vocabulary.nationality');
  // If the vocabulary already exists then we need to swap the enforced
  // dependency.
  if (!$nationality_config->isNew()) {
    $dependencies = $nationality_config->get('dependencies');
    $dependencies['enforced']['module'] = array_filter(
      $dependencies['enforced']['module'],
      static function (string $module) { return $module !== 'social_profile_fields'; }
    );
    $dependencies['enforced']['module'][] = 'social_profile';
    $nationality_config->set('dependencies', $dependencies)->save(TRUE);
  }
  // Otherwise we create the vocabulary.
  else {
    Vocabulary::create([
      'vid' => 'nationality',
      'name' => new TranslatableMarkup('Nationality'),
      'description' => new TranslatableMarkup('Nationalities'),
      'dependencies' => [
        'enforced' => [
          'module' => ['social_profile'],
        ],
      ],
    ])->save();

    // For the new vocabulary we must also load the default data set.
    _social_profile_populate_nationalities_vocabulary('10.3.0');
  }

  // Add nationality as profile field if it doesn't already exist.
  $nationality_storage_config = $config_factory->getEditable('field.storage.profile.field_profile_nationality');
  if (!$nationality_storage_config->isNew()) {
    // Remove social_profile_fields as dependency and instead properly set our
    // profile module as provider rather than core.
    $dependencies = $nationality_storage_config->get('dependencies');
    $dependencies['enforced']['module'] = array_filter(
      $dependencies['enforced']['module'],
      static function (string $module) { return $module !== 'social_profile_fields'; }
    );
    $nationality_storage_config
      ->set('dependencies', $dependencies)
      ->set('module', 'social_profile')
      ->save(TRUE);
  }
  else {
    FieldStorageConfig::create([
      'field_name' => "field_profile_nationality",
      'entity_type' => 'profile',
      'type' => 'entity_reference',
      'module' => 'social_profile',
      'translatable' => FALSE,
      'settings' => [
        'target_type' => 'taxonomy_term',
      ],
    ])->save();
  }

  $nationality_field_config = $config_factory->getEditable('field.field.profile.profile.field_profile_nationality');
  if (!$nationality_field_config->isNew()) {
    // Remove social_profile_fields as dependency and do not add a module
    // dependency since we depend only on the storage (which already specifies
    // the module).
    $dependencies = $nationality_field_config->get('dependencies');
    $dependencies['enforced']['module'] = array_filter(
      $dependencies['enforced']['module'],
      static function (string $module) { return $module !== 'social_profile_fields'; }
    );
    $nationality_field_config
      ->set('dependencies', $dependencies)
      ->save(TRUE);
  }
  else {
    FieldConfig::create([
      'field_storage' => FieldStorageConfig::load('profile.field_profile_nationality'),
      'bundle' => 'profile',
      'label' => new TranslatableMarkup('Nationality'),
      'required' => FALSE,
      'translatable' => FALSE,
      'settings' => [
        'handler' => 'default:taxonomy_term',
        'handler_settings' => [
          'target_bundles' => [
            'nationality' => 'nationality',
          ],
          'sort' => [
            'field' => 'name',
            'direction' => 'asc',
          ],
          'auto_create' => false,
          'auto_create_bundle' => '',
        ],
      ],
      'field_type' => 'entity_reference',
    ])->save();
  }

  // Add the nick name field if it doesn't already exist.
  $nick_name_storage_config = $config_factory->getEditable('field.storage.profile.field_profile_nick_name');
  if (!$nick_name_storage_config->isNew()) {
    // Remove social_profile_fields as dependency and instead properly set our
    // profile module as provider rather than core.
    $dependencies = $nick_name_storage_config->get('dependencies');
    $dependencies['enforced']['module'] = array_filter(
      $dependencies['enforced']['module'],
      static function (string $module) { return $module !== 'social_profile_fields'; }
    );
    $nick_name_storage_config
      ->set('dependencies', $dependencies)
      ->set('module', 'social_profile')
      ->save(TRUE);
  }
  else {
    FieldStorageConfig::create([
      'field_name' => "field_profile_nick_name",
      'entity_type' => 'profile',
      'type' => 'string',
      'module' => 'social_profile',
      'translatable' => FALSE,
      'cardinality' => 1,
      'settings' => [
        'max_length' => 255,
        'is_ascii' => FALSE,
        'case_sensitive' => FALSE,
      ],
    ])->save();
  }

  $nick_name_field_config = $config_factory->getEditable('field.field.profile.profile.field_profile_nick_name');
  if (!$nick_name_field_config->isNew()) {
    // Remove social_profile_fields as dependency and do not add a module
    // dependency since we depend only on the storage (which already specifies
    // the module).
    $dependencies = $nick_name_field_config->get('dependencies');
    $dependencies['enforced']['module'] = array_filter(
      $dependencies['enforced']['module'],
      static function (string $module) { return $module !== 'social_profile_fields'; }
    );
    $nick_name_field_config
      ->set('dependencies', $dependencies)
      ->save(TRUE);
  }
  else {
    FieldConfig::create([
      'field_storage' => FieldStorageConfig::load('profile.field_profile_nick_name'),
      'bundle' => 'profile',
      'label' => new TranslatableMarkup('Nickname'),
      'required' => FALSE,
      'translatable' => FALSE,
      'settings' => [],
      'field_type' => 'string',
    ])->save();
  }
}

/**
 * Delete permissions provided by merged social profile fields module.
 */
function social_profile_update_8911() : void {
  // This permission is revoked from all roles as it duplicates the broader
  // `administer profile settings` permissions which we would give out to the
  // exact same roles.
  foreach (Role::loadMultiple() as $role) {
    user_role_revoke_permissions($role->id(), ['social profile fields change used profile fields']);
  }
}

// TODO: Migrate users.data visibility into visibility fields.
// TODO: Migrate profile_fields settings into social_profile.

// TODO: Update visibility configuration form to use new fields.
// TODO: Merge SocialProfileFieldSettingsForm as "disabled" into form.

// TODO: Replace the need for `SocialProfileFieldsFlushForm` by hooking into search.

// TODO: Figure out a 10.x release that contains the proper deprecations for an easier upgrade.

// TODO: Add install config for form/display view modes for email, preferred language, nickname and nationality fields.

// TODO: Figure out SocialProfileFieldsHelper and profile_field_export_mapping alter hook.
// TODO: Replace SocialProfileFieldsOverride by configuration.
