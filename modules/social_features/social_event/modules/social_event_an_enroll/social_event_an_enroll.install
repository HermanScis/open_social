<?php

/**
 * @file
 * Install, update functions for the social_event_an_enroll module.
 */

use Drupal\user\Entity\Role;
use Drupal\block\Entity\Block;
use Drupal\field\Entity\FieldConfig;

/**
 * Implements hook_install().
 *
 * Perform actions related to the installation of social_event_an_enroll.
 */
function social_event_an_enroll_install() {
  module_set_weight('social_event_an_enroll', 10);
  _social_event_an_enroll_set_permissions();
  _social_event_an_enroll_fix_blocks();

  // Add changes to event_manage_enrollments view.
  _social_event_an_enroll_alter_event_manage_enrollments_view();
}

/**
 * Implements hook_uninstall().
 */
function social_event_an_enroll_uninstall() {
  $moduleHandler = \Drupal::service('module_handler');
  // Delete the email field is social_event_invite is not enabled.
  // @todo is there a way to get field dependencies instead of manual?
  if (!$moduleHandler->moduleExists('social_event_invite')) {
    $field = FieldConfig::loadByName('event_enrollment', 'event_enrollment', 'field_email');
    if ($field) {
      $field->delete();
    }
  }
}

/**
 * Implements hook_update_dependencies().
 */
function social_event_an_enroll_update_dependencies() {
  // New config changes should run after the VBO module changes
  // the structure of views.
  $dependencies['social_event_an_enroll'][10201] = [
    'views_bulk_operations' => 8034,
    'social_event_managers' => 10201,
  ];

  return $dependencies;
}

/**
 * Function to set permissions.
 */
function _social_event_an_enroll_set_permissions() {
  $roles = Role::loadMultiple();

  /** @var \Drupal\user\Entity\Role $role */
  foreach ($roles as $role) {
    if ($role->id() === 'administrator') {
      continue;
    }

    $permissions = _social_event_an_enroll_get_permissions($role->id());
    user_role_grant_permissions($role->id(), $permissions);
  }
}

/**
 * Build the permissions.
 *
 * @param string $role
 *   The role.
 *
 * @return array
 *   Returns an array containing the permissions.
 */
function _social_event_an_enroll_get_permissions($role) {
  // Anonymous.
  $permissions['anonymous'] = [];

  // Authenticated.
  $permissions['authenticated'] = array_merge($permissions['anonymous'], []);

  // Content manager.
  $permissions['contentmanager'] = array_merge($permissions['authenticated'], [
    'manage all enrollments',
  ]);

  // Site manager.
  $permissions['sitemanager'] = array_merge($permissions['contentmanager'], []);

  return isset($permissions[$role]) ? $permissions[$role] : [];
}

/**
 * Fix blocks visibility.
 */
function _social_event_an_enroll_fix_blocks() {
  $current_theme = \Drupal::configFactory()
    ->get('system.theme')
    ->get('default');

  $block_id = "{$current_theme}_pagetitleblock_2";
  $block = Block::load($block_id);
  if (isset($block)) {
    $visibility = $block->get('visibility');
    if ($visibility['request_path']['negate'] == FALSE) {
      $pages = $visibility['request_path']['pages'];
      $pages .= "\r\n*/manage-enrollments";
      $visibility['request_path']['pages'] = $pages;
      $block->set('visibility', $visibility);
      $block->save();
    }
  }
}

/**
 * Add a custom action to 'views.view.event_manage_enrollments'.
 *
 * Action ID: 'social_event_an_enroll_send_email_action'.
 */
function _social_event_an_enroll_alter_event_manage_enrollments_view() {
  $config = \Drupal::configFactory()->getEditable('views.view.event_manage_enrollments');
  $selected_actions = $config->get('display.default.display_options.fields.social_views_bulk_operations_bulk_form_enrollments_1.selected_actions');

  // Get the preconfiguration of social_event_managers_send_email_action.
  foreach ($selected_actions as $key => $value) {
    if ($value['action_id'] === 'social_event_managers_send_email_action') {
      $preconfiguration = $value['preconfiguration'];
    }
  }

  // Remove regular 'social_event_managers_send_email_action' action.
  if (!empty($selected_actions)) {
    $selected_actions = _social_core_remove_element_with_value($selected_actions, 'action_id', 'social_event_managers_send_email_action') ?? $selected_actions;
  }

  $selected_actions[] = [
    'action_id' => 'social_event_an_enroll_send_email_action',
    'preconfiguration' => $preconfiguration,
  ];

  $config->set('display.default.display_options.fields.social_views_bulk_operations_bulk_form_enrollments_1.selected_actions', $selected_actions);
  $config->save();
}

/**
 * Fix text of AU Enrollment Confirmation Email.
 */
function social_event_an_enroll_update_8001() {
  $config = \Drupal::service('config.factory')->getEditable('social_event_an_enroll.settings');
  $config->set('event_an_enroll_email_subject', "You are enrolled in the event [node:title]");
  $config->set('event_an_enroll_email_body', "You have been enrolled in the event [node:title]. You can cancel your enrollment anytime using the following link: [social_event_an_enroll:enrolled_event].");
  $config->save();
}

/**
 * Enable Event AN Enroll globally by default.
 */
function social_event_an_enroll_update_8002() {
  $config = \Drupal::service('config.factory')->getEditable('social_event_an_enroll.settings');
  $config->set('event_an_enroll', TRUE);
  $config->save();
}

/**
 * Set default value for Event AN Enroll and allow authors to change it.
 */
function social_event_an_enroll_update_8003() {
  $config = \Drupal::service('config.factory')->getEditable('social_event_an_enroll.settings');
  $config->set('event_an_enroll_default_value', FALSE);
  $config->set('event_an_enroll_allow_edit', TRUE);
  $config->save();
}

/**
 * Update description and label.
 */
function social_event_an_enroll_update_8004() {
  /** @var \Drupal\update_helper\Updater $updateHelper */
  $updateHelper = \Drupal::service('update_helper.updater');

  // Execute configuration update definitions with logging of success.
  $updateHelper->executeUpdate('social_event_an_enroll', 'social_event_an_enroll_update_8004');

  // Output logged messages to related channel of update execution.
  return $updateHelper->logger()->output();
}

/**
 * Add a custom action to 'views.view.event_manage_enrollments'.
 *
 * Action ID: 'social_event_an_enroll_send_email_action'.
 */
function social_event_an_enroll_update_10201(&$sandbox) {
  _social_event_an_enroll_alter_event_manage_enrollments_view();
}
